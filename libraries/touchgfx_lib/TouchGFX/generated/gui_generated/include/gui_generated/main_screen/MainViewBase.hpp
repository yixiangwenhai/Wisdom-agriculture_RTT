/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndClear.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void sliderValueChanged(int value)
    {
        // Override and implement this function in Main
    }

    virtual void diandeng()
    {
        // Override and implement this function in Main
    }

    virtual void jiashiqi()
    {
        // Override and implement this function in Main
    }

    virtual void fenshan()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::BoxWithBorder graphBackground;
    touchgfx::GraphWrapAndClear<100> graph;
    touchgfx::GraphElementLine graphLine1;
    touchgfx::PainterRGB888 graphLine1Painter;
    touchgfx::GraphElementGridY graphMajorYAxisGrid;
    touchgfx::GraphLabelsX graphMajorXAxisLabel;
    touchgfx::GraphLabelsY graphMajorYAxisLabel;
    touchgfx::Slider sliderResolution;
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard textWenDu;
    touchgfx::TextArea textArea1_2;
    touchgfx::TextArea textArea1_3;
    touchgfx::TextArea textArea1_4;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::ToggleButton toggleButton1_1;
    touchgfx::ToggleButton toggleButton1_2;
    touchgfx::TextAreaWithOneWildcard textErYangHuaTan;
    touchgfx::TextAreaWithOneWildcard textJiaQuan;
    touchgfx::TextAreaWithOneWildcard textGuangZhao;
    touchgfx::TextAreaWithOneWildcard textShiDu;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTWENDU_SIZE = 9;
    touchgfx::Unicode::UnicodeChar textWenDuBuffer[TEXTWENDU_SIZE];
    static const uint16_t TEXTERYANGHUATAN_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textErYangHuaTanBuffer[TEXTERYANGHUATAN_SIZE];
    static const uint16_t TEXTJIAQUAN_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textJiaQuanBuffer[TEXTJIAQUAN_SIZE];
    static const uint16_t TEXTGUANGZHAO_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textGuangZhaoBuffer[TEXTGUANGZHAO_SIZE];
    static const uint16_t TEXTSHIDU_SIZE = 7;
    touchgfx::Unicode::UnicodeChar textShiDuBuffer[TEXTSHIDU_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 15360;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MAINVIEWBASE_HPP
